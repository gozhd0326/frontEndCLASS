프론트엔드 GameShop
- 로컬디스크에 있는 DB파일을 사용했었음
- 웹서버에 있는 Database로 변경!!! games
- fetch,RestAPI를 사용하여 웹서버로부터 정보를 얻음
- fetch를 더 편리하게 사용하는 방법 = react-query
- react-query의 장점
 1) isLoading 제공
 2) 자주 사용하는 요청 데이터를 캐싱(저장)함. 네트워크 사용줄임
- DB엑세스를 모든 페이지에서 따로따로 요청하는 방식은 리액트에 맞지 않음 ==> 초기에 대량의 데이터를 모두 받아와서 이후 네트워크 요청없이 자체적으로 화면 구현하는 것이 SPA 방식!!!
- 프론트엔드도 내부적인 구조, 설계를 효율적으로 가져가는 방식이 중요해짐!!!
  ex)
 초기에 어떤 데이터를 가져올까?
 그 데이터를 어떻게 필요한 컴포넌트에게 전달할까?
 어떻게하면 네트워크 사용을 최소화할까? 
 어떻게하면 데이터 다운로드 로딩시간을 줄일 수 있을까?
-games DB를 초기에 한번 다운로드하고 재사용하도록 구성
==> GameShopLoader 컴포넌트 추가!!!!
==> games DB를 context에 저장하여 전체 컴포넌트에서 사용함
(그래서 리덕스(더 오래됨)와 리코일(선생님 추천) 들이 외부 라이브러리를 사용한다고 함(하이레벨의 상태관리자(리액트의 후크들에 비해)
(기존에 작성했던 코드와 변경한 코드들을 비교하며 공부하기!!!)